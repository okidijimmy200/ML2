apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook-gen-model
  namespace: argo
spec:
  dependencies:
    - name: generate-model-dependency
      eventSourceName: webhook-gen-model
      eventName: webhook-gen-model
  triggers:
    - template:
        name: webhook-workflow-trigger
        k8s:
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11, pipelines.kubeflow.org/pipeline_compilation_time: '2022-05-10T00:01:34.309876',
                  pipelines.kubeflow.org/pipeline_spec: '{"description": "deploy and synthetic data
                    generator", "inputs": [{"name": "user_id"}, {"name": "train_id"}, {"name": "raw_data_path"},
                    {"name": "gen_id"}, {"name": "num_rows"}], "name": "betterdata
                    synthetic pipeline"}'}
                labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.11}
                name: my-workflow-
                namespace: argo
              spec:
                entrypoint: betterdata-synthetic-pipeline-generate
                onExit: exit-handler
                templates:
                - name: betterdata-synthetic-pipeline-generate
                  inputs:
                    parameters:
                    - {name: num_rows}
                    - {name: gen_id}
                    - {name: raw_data_path}
                    - {name: train_id}
                    - {name: user_id}
                    - {name: minio_creds}
                  dag:
                    tasks:
                    - name: generate-model
                      template: generate-model
                      arguments:
                        parameters:
                        - {name: gen_id, value: '{{inputs.parameters.gen_id}}'}
                        - {name: raw_data_path, value: '{{inputs.parameters.raw_data_path}}'}
                        - {name: train_id, value: '{{inputs.parameters.train_id}}'}
                        - {name: user_id, value: '{{inputs.parameters.user_id}}'}
                        - {name: minio_creds, value: '{{inputs.parameters.minio_creds}}'}
                        - {name: num_rows, value: '{{inputs.parameters.num_rows}}'}


                - name: generate-model
                  container:
                    command: [python, main.py, --user_id, '{{inputs.parameters.user_id}}', --train_id,
                      '{{inputs.parameters.train_id}}', --raw_data_path, '{{inputs.parameters.raw_data_path}}',
                      --gen_id, '{{inputs.parameters.gen_id}}', --minio_creds, '{{inputs.parameters.minio_creds}}', --num_rows, '{{inputs.parameters.num_rows}}']
                    image: localhost:5000/model_deploy_v2
                    imagePullPolicy: IfNotPresent
                  inputs:
                    parameters:
                    - {name: gen_id}
                    - {name: raw_data_path}
                    - {name: train_id}
                    - {name: user_id}
                    - {name: minio_creds}
                    - {name: num_rows}

                - name: exit-handler
                  steps:
                  - - name: notify
                      template: updateMySQL
                      when: "{{workflow.status}} == Succeeded"
                - name: updateMySQL
                  script:
                    image: shamiulshifat/python-mysql-minio
                    command: [python]
                    source: |
                      import sqlalchemy as db
                      import sqlalchemy
                      from sqlalchemy import create_engine
                      from sqlalchemy.sql import text
                      engine = db.create_engine('{{workflow.parameters.mysql_creds}}')
                      #engine = db.create_engine('mysql+pymysql://betterdata:123456@34.131.131.97:3306/betterdata')
                      connection = engine.connect()
                      metadata = db.MetaData()
                      model_data = db.Table('model_data', metadata, autoload=True, autoload_with=engine)
                      #update database
                      user_id={{workflow.parameters.user_id}}
                      gen_id={{workflow.parameters.gen_id}}
                      with engine.connect() as con:
                          statement = text("""
                          UPDATE model_data
                          SET status='Completed'
                          WHERE user_id=int(user_id) AND gen_id=int(gen_id);
                          """)
                          con.execute(statement)
                      print("status updated")  
                metadata:
                  labels:
                    pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
                    pipelines.kubeflow.org/pipeline-sdk-type: kfp
                    pipelines.kubeflow.org/enable_caching: "true"
                arguments:
                  parameters:
                  - {name: raw_data_path}
                  - {name: user_id}
                  - {name: gen_id}
                  - {name: train_id}
                  - {name: num_rows}
                  - {name: minio_creds}
                  - {name: mysql_creds}
                
              

          operation: create
          parameters:
            - src:
                dependencyName: generate-model-dependency
                dataKey: body.raw_data_path
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: generate-model-dependency
                dataKey: body.user_id
              dest: metadata.name
              operation: append
            - src:
                dependencyName: generate-model-dependency
                dataKey: body.user_id
              dest: spec.arguments.parameters.1.value
            - src:
                dependencyName: generate-model-dependency
                dataKey: body.gen_id
              dest: spec.arguments.parameters.2.value
            - src:
                dependencyName: generate-model-dependency
                dataKey: body.gen_id
              dest: metadata.name
              operation: append
            - src:
                dependencyName: generate-model-dependency
                dataKey: body.train_id
              dest: spec.arguments.parameters.3.value
            - src:
                dependencyName: generate-model-dependency
                dataKey: body.num_rows
              dest: spec.arguments.parameters.4.value
            - src:
                dependencyName: generate-model-dependency
                dataKey: body.minio_creds
              dest: spec.arguments.parameters.5.value
            - src:
                dependencyName: generate-model-dependency
                dataKey: body.mysql_creds
              dest: spec.arguments.parameters.6.value
            
